#!/usr/bin/env ruby

module MultithreadedEach
  def multithreaded_each
    each_with_object([]) do |item, threads|
      threads << Thread.new { yield item }
    end.each { |thread| thread.join }
    self
  end
end

(ARGV.empty? ? [''] : ARGV).extend(MultithreadedEach).multithreaded_each do |arg|
  if arg.empty?
    args = []
  else
    args = ['pitch', (arg.to_i * 100).to_s]
  end

  args = ['play', "#{ ENV['HOME'] }/data/sounds/click.ogg"] + args + %w{gain -20}
  IO.popen(args, {:err => [:child, :out]}) do |io| io.read end
end
